{"version":3,"sources":["webpack:///./src/components/Banner/index.js","webpack:///./src/components/Image/banner.js","webpack:///./src/components/PostItem/index.js","webpack:///./src/pages/posts.js"],"names":["Banner","props","className","children","Image","data","fluid","placeholderImage","childImageSharp","iconList","colorList","PostItem","node","edge","frontmatter","timeToRead","excerpt","path","title","date","featuredImage","iconIndex","Math","floor","random","length","colorIndex","to","style","color","Posts","Layout","allMarkdownRemark","edges","map","key"],"mappings":"66CAAA,mCAaeA,IATA,SAACC,GACd,OACE,yBAAKC,UAAU,UACb,yBAAKA,UAAU,cACZD,EAAME,a,m4HCYAC,IAhBD,WACZ,IAAMC,EAAI,OAYV,OAAO,kBAAC,IAAD,CAAKC,MAAOD,EAAKE,iBAAiBC,gBAAgBF,U,8JCXrDG,G,UAAW,CAAC,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,MAAO,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,OACziBC,EAAY,CAAC,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,WAiCzKC,EA/BE,SAAC,GAAwB,IAAdC,EAAa,EAArBC,KAAQD,KAClBE,EAAqCF,EAArCE,YAAaC,EAAwBH,EAAxBG,WAAYC,EAAYJ,EAAZI,QACzBC,EAAqCH,EAArCG,KAAMC,EAA+BJ,EAA/BI,MAAOC,EAAwBL,EAAxBK,KAAMC,EAAkBN,EAAlBM,cAErBC,EAAYC,KAAKC,MAAMD,KAAKE,SAAWf,EAASgB,QAChDC,EAAaJ,KAAKC,MAAMD,KAAKE,SAAWd,EAAUe,QACxD,OACE,yBAAKE,GAAIV,EAAMf,UAAU,aACvB,yBAAKA,UAAU,gBACb,4BACGO,EAASY,GACV,kBAAC,OAAD,CAAMO,MAAO,CAAEC,MAAOnB,EAAUgB,IAAeC,GAAIV,GAAnD,IAA2DC,EAA3D,MAEF,uBAAGhB,UAAU,aAAb,OACOiB,EADP,WACqBJ,EADrB,OAGA,yBAAKb,UAAU,wBACZc,IAIHI,GACAA,EAAcZ,iBACdY,EAAcZ,gBAAgBF,OAC9B,kBAAC,OAAD,CAAMJ,UAAU,OAAOyB,GAAIV,GACzB,kBAAC,IAAD,CAAKX,MAAOc,EAAcZ,gBAAgBF,W,wBCoBrCwB,UA7CD,SAAC7B,GACb,IAAMI,EAAI,OA4BV,OACE,kBAAC0B,EAAA,EAAD,KACE,kBAAC,IAAD,CAAKb,MAAM,SACX,kBAAClB,EAAA,EAAD,KACE,kBAAC,IAAD,OAEF,yBAAKE,UAAU,WAEXG,GAAQA,EAAK2B,kBAAkBC,MAAMC,KAAI,SAAArB,GAAI,OAC3C,kBAAC,EAAD,CAAUsB,IAAKtB,EAAKD,KAAKE,YAAYG,KAAMJ,KAAMA,W","file":"component---src-pages-posts-js-6a785408f935ef1ffa31.js","sourcesContent":["import React from \"react\"\n\nimport \"./index.less\"\n\nconst Banner = (props) => {\n  return (\n    <div className=\"banner\">\n      <div className=\"banner-box\">\n        {props.children}\n      </div>\n    </div>\n  )\n};\nexport default Banner\n","import React from \"react\"\nimport { useStaticQuery, graphql } from \"gatsby\"\nimport Img from \"gatsby-image\"\n\nconst Image = () => {\n  const data = useStaticQuery(graphql`\n    query {\n      placeholderImage: file(relativePath: { eq: \"banner.png\" }) {\n        childImageSharp {\n          fluid(maxWidth: 1920) {\n            ...GatsbyImageSharpFluid\n          }\n        }\n      }\n    }\n  `)\n\n  return <Img fluid={data.placeholderImage.childImageSharp.fluid} />\n}\n\nexport default Image\n","import React from \"react\"\nimport { Link } from \"gatsby\"\nimport Img from \"gatsby-image\"\n\nimport \"./index.less\"\n\nconst iconList = ['ü¶ê', 'ü¶Ä', 'üçè', 'üçé', 'üçê', 'üçä', 'üçã', 'üçå', 'üçâ', 'üçá', 'üçì', 'üçà', 'üçí', 'üçë', 'ü••', 'ü•ù', 'üçÖ', 'üçÜ', 'ü•ë', 'ü•¶', 'ü•í', 'üå∂', 'üåΩ', 'ü•ï', 'ü•î', 'ü•ê', 'üç†', 'üçû', 'ü•ñ', 'üßÄ', 'ü•ö', 'ü•û', 'ü•ì', 'ü•©', 'üçó', 'üçñ', 'üå≠', 'üçî', 'üçï', 'ü•™', 'üåÆ', 'üçù', 'üçú', 'üç≤', 'üçù', 'üçõ', 'üç£', 'ü•ü', 'üç§', 'üçö', 'üç•', 'ü•†', 'üç¢', 'üç°', 'üçß', 'üç®', 'üç¶', 'ü•ß', 'üç∞', 'üéÇ', 'üçÆ', 'üç≠', 'üç¨', 'üç´', 'üçø', 'üç©', 'üç™', 'üå∞', 'üçØ', 'ü•õ', 'üçºÔ∏è', 'üçµ', 'ü•§', 'üç∂', 'üç∫', 'üçª', 'üç∑', 'ü•É', 'üçπ', 'ü§™', 'ü§´', 'ü§£', 'ü§®', 'üòõ', 'üßê', 'üéâ', 'ü§î', 'ü§≠', 'ü§í', 'ü•±', 'ü•¥'];\nconst colorList = [\"#42b983\", \"#33A5FF\", \"#B03734\", \"#2EAFB0\", \"#6EC1C2\", \"#ED9EC7\", \"#FCA650\", \"#3F7CFF\", \"#93C0A4\", \"#EA7E5C\", \"#F5CE50\", \"#465975\", \"#FFDD4D\", \"#7F2B82\", \"#4b4b4b\", \"#E41A6A\"];\n\nconst PostItem = ({ edge: { node } }) => {\n  const { frontmatter, timeToRead, excerpt } = node\n  const { path, title, date, featuredImage } = frontmatter\n\n  const iconIndex = Math.floor(Math.random() * iconList.length);\n  const colorIndex = Math.floor(Math.random() * colorList.length);\n  return (\n    <div to={path} className=\"post-item\">\n      <div className=\"post-content\">\n        <h3>\n          {iconList[iconIndex]}\n          <Link style={{ color: colorList[colorIndex] }} to={path}> {title} </Link>\n        </h3>\n        <p className=\"post-meta\">\n          ÂèëÂ∏É‰∫é {date} È¢ÑËÆ°ÈòÖËØªÈúÄË¶Å {timeToRead} ÂàÜÈíü\n        </p>\n        <div className=\"post-content-preview\">\n          {excerpt}\n        </div>\n      </div>\n      {\n        featuredImage &&\n        featuredImage.childImageSharp &&\n        featuredImage.childImageSharp.fluid &&\n        <Link className=\"link\" to={path}>\n          <Img fluid={featuredImage.childImageSharp.fluid} />\n        </Link>\n      }\n    </div>\n  )\n};\nexport default PostItem\n","import React from \"react\"\nimport { graphql, useStaticQuery } from \"gatsby\"\n\nimport SEO from \"../components/seo\"\nimport Layout from \"../components/Layout\"\nimport PostItem from \"../components/PostItem\"\nimport Banner from \"../components/Banner\"\nimport BannerImage from '../components/Image/banner'\n\nconst Posts = (props) => {\n  const data = useStaticQuery(graphql`\n    query {\n      allMarkdownRemark(sort: { fields: [frontmatter___date], order: DESC}) {\n        edges {\n          node {\n            frontmatter {\n              path\n              title\n              date(formatString: \"YYYY-MM-DD\")\n              featuredImage {\n                childImageSharp {\n                  fluid(maxWidth: 400) {\n                    aspectRatio\n                    base64\n                    sizes\n                    src\n                    srcSet\n                  }\n                }\n              }\n            }\n            timeToRead\n            excerpt(pruneLength: 200)\n          }\n        }\n      }\n    }`)\n\n  return (\n    <Layout>\n      <SEO title=\"ÂçöÂÆ¢ÂàóË°®\" />\n      <Banner>\n        <BannerImage />\n      </Banner>\n      <div className=\"content\">\n        {\n          data && data.allMarkdownRemark.edges.map(edge => (\n            <PostItem key={edge.node.frontmatter.path} edge={edge} />\n          ))\n        }\n      </div>\n    </Layout>\n  )\n};\nexport default Posts\n"],"sourceRoot":""}