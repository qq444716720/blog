{"version":3,"sources":["webpack:///./src/components/PostItem/index.js","webpack:///./src/components/Banner/index.js","webpack:///./src/pages/posts.js"],"names":["iconList","colorList","PostItem","node","edge","frontmatter","timeToRead","excerpt","path","title","date","cover","iconIndex","Math","floor","random","length","colorIndex","to","className","style","flex","display","flexDirection","color","src","alt","Banner","img","Posts","props","data","Layout","allMarkdownRemark","edges","map","key"],"mappings":"woBAKMA,G,UAAW,CAAC,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,MAAO,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,OAC/iBC,EAAY,CAAC,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,WAgCzKC,EA9BE,SAAC,GAAwB,IAAdC,EAAa,EAArBC,KAAQD,KAClBE,EAAqCF,EAArCE,YAAaC,EAAwBH,EAAxBG,WAAYC,EAAYJ,EAAZI,QACzBC,EAA6BH,EAA7BG,KAAMC,EAAuBJ,EAAvBI,MAAOC,EAAgBL,EAAhBK,KAAMC,EAAUN,EAAVM,MACrBC,EAAYC,KAAKC,MAAMD,KAAKE,SAAWf,EAASgB,QAChDC,EAAaJ,KAAKC,MAAMD,KAAKE,SAAWd,EAAUe,QACxD,OACE,yBAAKE,GAAIV,EAAMW,UAAU,aACvB,yBAAKC,MAAO,CACVC,KAAM,EACNC,QAAS,OACTC,cAAe,WAEf,4BACGvB,EAASY,GACV,kBAAC,OAAD,CAAMQ,MAAO,CAAEI,MAAOvB,EAAUgB,IAAeC,GAAIV,GAAnD,IAA2DC,EAA3D,MAEF,yBAAKU,UAAU,wBACZZ,GAEH,uBAAGY,UAAU,aAAb,OACOT,EADP,WACqBJ,EADrB,QAKAK,GACA,yBAAKc,IAAKd,EAAOe,IAAI,OCpBdC,G,UATA,SAAC,GAAa,IAAXC,EAAU,EAAVA,IAChB,OACE,yBAAKT,UAAU,UACb,yBAAKA,UAAU,cACb,yBAAKM,IAAKG,EAAKF,IAAI,SCiCZG,UAjCD,SAACC,GACb,IAAMC,EAAI,OAkBV,OACE,kBAACC,EAAA,EAAD,KACE,kBAAC,IAAD,CAAKvB,MAAM,SACX,kBAAC,EAAD,CAAQmB,IAAI,yEACZ,yBAAKT,UAAU,WAEXY,GAAQA,EAAKE,kBAAkBC,MAAMC,KAAI,SAAA/B,GAAI,OAC3C,kBAAC,EAAD,CAAUgC,IAAKhC,EAAKD,KAAKE,YAAYG,KAAMJ,KAAMA,W","file":"component---src-pages-posts-js-ea9d4e4da37d7079009a.js","sourcesContent":["import React from \"react\"\nimport { Link } from \"gatsby\"\n\nimport \"./index.less\"\n\nconst iconList = ['🦑', '🦐', '🦀', '🍏', '🍎', '🍐', '🍊', '🍋', '🍌', '🍉', '🍇', '🍓', '🍈', '🍒', '🍑', '🍍', '🥥', '🥝', '🍅', '🍆', '🥑', '🥦', '🥒', '🌶', '🌽', '🥕', '🥔', '🥐', '🍠', '🍞', '🥖', '🥨', '🧀', '🥚', '🥞', '🥓', '🥩', '🍗', '🍖', '🌭', '🍔', '🍟', '🍕', '🥪', '🌮', '🌯', '🥘', '🥗', '🍝', '🥫', '🥘', '🍜', '🍲', '🍝', '🍛', '🍣', '🍱', '🥟', '🍤', '🍚', '🍥', '🥠', '🍢', '🍡', '🍧', '🍨', '🍦', '🥧', '🍰', '🎂', '🍮', '🍭', '🍬', '🍫', '🍿', '🍩', '🍪', '🌰', '🍯', '🥛', '🍼️', '🍵', '🥤', '🍶', '🍺', '🍻', '🍷', '🥃', '🍸', '🍹', '🍾', '🥡'];\nconst colorList = [\"#42b983\", \"#33A5FF\", \"#B03734\", \"#2EAFB0\", \"#6EC1C2\", \"#ED9EC7\", \"#FCA650\", \"#3F7CFF\", \"#93C0A4\", \"#EA7E5C\", \"#F5CE50\", \"#465975\", \"#FFDD4D\", \"#7F2B82\", \"#4b4b4b\", \"#E41A6A\"];\n\nconst PostItem = ({ edge: { node } }) => {\n  const { frontmatter, timeToRead, excerpt } = node\n  const { path, title, date, cover } = frontmatter\n  const iconIndex = Math.floor(Math.random() * iconList.length);\n  const colorIndex = Math.floor(Math.random() * colorList.length);\n  return (\n    <div to={path} className=\"post-item\">\n      <div style={{\n        flex: 1,\n        display: 'flex',\n        flexDirection: 'column',\n      }}>\n        <h2>\n          {iconList[iconIndex]}\n          <Link style={{ color: colorList[colorIndex] }} to={path}> {title} </Link>\n        </h2>\n        <div className=\"post-content-preview\">\n          {excerpt}\n        </div>\n        <p className=\"post-meta\">\n          发布于 {date} 预计阅读需要 {timeToRead} 分钟\n      </p>\n      </div>\n      {\n        cover &&\n        <img src={cover} alt=\"\" />\n      }\n    </div>\n  )\n};\nexport default PostItem\n","import React from \"react\"\n\nimport \"./index.less\"\n\nconst Banner = ({ img }) => {\n  return (\n    <div className=\"banner\">\n      <div className=\"banner-box\">\n        <img src={img} alt=\"\" />\n      </div>\n    </div>\n  )\n};\nexport default Banner\n","import React from \"react\"\nimport { graphql, useStaticQuery } from \"gatsby\"\n\nimport SEO from \"../components/seo\"\nimport Layout from \"../components/Layout\"\nimport PostItem from \"../components/PostItem\"\nimport Banner from \"../components/Banner\"\n\nconst Posts = (props) => {\n  const data = useStaticQuery(graphql`\n    query {\n      allMarkdownRemark(sort: { fields: [frontmatter___date], order: DESC}) {\n        edges {\n          node {\n            frontmatter {\n              path\n              title\n              date(formatString: \"YYYY-MM-DD\")\n              cover\n            }\n            timeToRead\n            excerpt(pruneLength: 200)\n          }\n        }\n      }\n    }`)\n\n  return (\n    <Layout>\n      <SEO title=\"博客列表\" />\n      <Banner img=\"https://pic2.zhimg.com/80/8962c3db4c22682ddda5c2c6a8c5680f_1440w.jpg\" />\n      <div className=\"content\">\n        {\n          data && data.allMarkdownRemark.edges.map(edge => (\n            <PostItem key={edge.node.frontmatter.path} edge={edge} />\n          ))\n        }\n      </div>\n    </Layout>\n  )\n};\nexport default Posts\n"],"sourceRoot":""}